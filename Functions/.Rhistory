apiCheck <- function(req) {
if (req$status_code==400) {
error_message <- (gsub("<[^>]*>", "", httr::content(req, as="text")))
if (error_message == "error: missing 'for' argument") {
stop("This dataset requires you to specify a geography with the 'region' argument.")
}
stop(paste("The Census Bureau returned the following error message:\n", error_message,
"\n Your API call was: ", print(req$url)))
}
# Some time series don't give error messages, just don't resolve (e.g. SAIPE)
if (req$status_code==204) stop("204, no content was returned.\nSee ?listCensusMetadata to learn more about valid API options.", call. = FALSE)
if (identical(httr::content(req, as = "text"), "")) stop(paste("No output to parse. \n Your API call was: ", print(req$url)), call. = FALSE)
}
apiParse <- function (req) {
if (jsonlite::validate(httr::content(req, as="text"))[1] == FALSE) {
error_message <- (gsub("<[^>]*>", "", httr::content(req, as="text")))
stop(paste("The Census Bureau returned the following error message:\n", error_message, "\nYour api call was: ", req$url))
} else {
raw <- jsonlite::fromJSON(httr::content(req, as = "text"))
}
}
# Function to clean up column names - particularly ones with periods in them
cleanColnames <- function(dt) {
# No trailing punct
colnames(dt) <- gsub("\\.[[:punct:]]*$", "", colnames(dt))
# All punctuation becomes underscore
colnames(dt) <- gsub("[[:punct:]]", "_", colnames(dt))
# Get rid of repeat underscores
colnames(dt) <- gsub("(_)\\1+", "\\1", colnames(dt))
return(dt)
}
responseFormat <- function(raw) {
# Make first row the header
colnames(raw) <- raw[1, ]
df <- data.frame(raw)
df <- df[-1,]
df <- cleanColnames(df)
# Make all columns character
df[] <- lapply(df, as.character)
# Make columns numeric if they have numbers in the column name - note some APIs use string var names
# For ACS data, do not make columns numeric if they are ACS annotation variables - ending in MA or EA or SS
# Do not make label variables (ending in _TTL) numeric
value_cols <- grep("[0-9]", names(df), value=TRUE)
error_cols <- grep("MA|EA|SS|_TTL|_NAME|NAICS2012|NAICS2012_TTL|fage4|FAGE4", value_cols, value=TRUE, ignore.case = T)
for(col in setdiff(value_cols, error_cols)) df[,col] <- as.numeric(df[,col])
row.names(df) <- NULL
return(df)
}
# Check the API call for a valid response
apiCheck(req)
# If check didn't fail, parse the content
raw <- apiParse(req)
# Format the response into a nice data frame
df <- responseFormat(raw)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
df
Census_API_Key
API_URL <- paste("https://api.census.gov/data/2016/acs/acs1/spp?get=", sahie_vars$name, ",S0201_0123E&for=congressional%20district:*&key=", Census_API_Key, sep = "")
x <- httr::GET(API_URL)
API_URL
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
df
x
sahie_vars$name
paste(c(sahie_vars$name), collapse = ",")
vars <- paste(c(sahie_vars$name), collapse = ",")
API_URL <- paste("https://api.census.gov/data/2016/acs/acs1/spp?get=", vars, ",S0201_0123E&for=congressional%20district:*&key=", Census_API_Key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
vars <- paste(c(sahie_vars$name[1:49]), collapse = ",")
API_URL <- paste("https://api.census.gov/data/2016/acs/acs1/spp?get=", vars, ",S0201_0123E&for=congressional%20district:*&key=", Census_API_Key, sep = "")
x <- httr::GET(API_URL)
x$status_code
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
df
Sys.getenv("CENSUS_KEY")
Census_API_Call <- function(name, vars, region, vintage, key = Sys.getenv("CENSUS_KEY")){
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars, ",S0201_0123E&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
return(df)
}
# Return API's built in error message if invalid call
apiCheck <- function(req) {
if (req$status_code==400) {
error_message <- (gsub("<[^>]*>", "", httr::content(req, as="text")))
if (error_message == "error: missing 'for' argument") {
stop("This dataset requires you to specify a geography with the 'region' argument.")
}
stop(paste("The Census Bureau returned the following error message:\n", error_message,
"\n Your API call was: ", print(req$url)))
}
# Some time series don't give error messages, just don't resolve (e.g. SAIPE)
if (req$status_code==204) stop("204, no content was returned.\nSee ?listCensusMetadata to learn more about valid API options.", call. = FALSE)
if (identical(httr::content(req, as = "text"), "")) stop(paste("No output to parse. \n Your API call was: ", print(req$url)), call. = FALSE)
}
apiParse <- function (req) {
if (jsonlite::validate(httr::content(req, as="text"))[1] == FALSE) {
error_message <- (gsub("<[^>]*>", "", httr::content(req, as="text")))
stop(paste("The Census Bureau returned the following error message:\n", error_message, "\nYour api call was: ", req$url))
} else {
raw <- jsonlite::fromJSON(httr::content(req, as = "text"))
}
}
# Function to clean up column names - particularly ones with periods in them
cleanColnames <- function(dt) {
# No trailing punct
colnames(dt) <- gsub("\\.[[:punct:]]*$", "", colnames(dt))
# All punctuation becomes underscore
colnames(dt) <- gsub("[[:punct:]]", "_", colnames(dt))
# Get rid of repeat underscores
colnames(dt) <- gsub("(_)\\1+", "\\1", colnames(dt))
return(dt)
}
responseFormat <- function(raw) {
# Make first row the header
colnames(raw) <- raw[1, ]
df <- data.frame(raw)
df <- df[-1,]
df <- cleanColnames(df)
# Make all columns character
df[] <- lapply(df, as.character)
# Make columns numeric if they have numbers in the column name - note some APIs use string var names
# For ACS data, do not make columns numeric if they are ACS annotation variables - ending in MA or EA or SS
# Do not make label variables (ending in _TTL) numeric
value_cols <- grep("[0-9]", names(df), value=TRUE)
error_cols <- grep("MA|EA|SS|_TTL|_NAME|NAICS2012|NAICS2012_TTL|fage4|FAGE4", value_cols, value=TRUE, ignore.case = T)
for(col in setdiff(value_cols, error_cols)) df[,col] <- as.numeric(df[,col])
row.names(df) <- NULL
return(df)
}
getCensus2 <- function(name, vars, region, vintage, key = Sys.getenv("CENSUS_KEY")){
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars, ",S0201_0123E&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
return(df)
}
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure
sahie_vars$name[2]
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = vars],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = vars,
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
vars <- paste(c(sahie_vars$name[1]), collapse = ",")
vars
vars <- paste(c(sahie_vars$name[1:2]), collapse = ",")
vars
getCensus2 <- function(name, vars, region, vintage, key = Sys.getenv("CENSUS_KEY")){
vars1 <- paste(c(vars), collapse = ",")
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, ",S0201_0123E&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
return(df)
}
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name,
region = "congressionaldistrict:*",
vintage = 2016,
key = Census_API_Key)
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name,
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
cbp_vars$name
getCensus2 <- function(name, vars, region, vintage, key = Sys.getenv("CENSUS_KEY")){
vars1 <- paste(c(vars), collapse = ",")
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
return(df)
}
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name,
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name[1],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
Business_Pure
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
cbp_vars$name[1:2]
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name[2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
Census_API_Key
httr::GET("https://api.census.gov/data/2016/cbp?get=NAICS2012_TTL,GEO_TTL,EMP,LFO_TTL,GEO_ID,ESTAB&for=congressional%20district:*&key=303812245e8e8b64bedb607d2396675cdd8c7b80")
x <- httr::GET("https://api.census.gov/data/2016/cbp?get=NAICS2012_TTL,GEO_TTL,EMP,LFO_TTL,GEO_ID,ESTAB&for=congressional%20district:*&key=303812245e8e8b64bedb607d2396675cdd8c7b80")
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
df
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name[2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
cbp_vars$name
paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
name = "cbp",
vars = cbp_vars$name[2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key
name = "cbp"
vars = cbp_vars$name[2]
region = "congressional%20district:*"
vintage = 2016
key = Census_API_Key
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
vars1 <- paste(c(vars), collapse = ",")
vars1
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
httr::GET(API_URL)
Business_Pure <- getCensus2(name = "cbp",
vars = cbp_vars$name[2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
API_URL
x <- httr::GET("https://api.census.gov/data/2016/cbp?get=NAICS2012_TTL,GEO_TTL,EMP,LFO_TTL,GEO_ID,ESTAB&for=congressional%20district:*&key=303812245e8e8b64bedb607d2396675cdd8c7b80")
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
Business_Pure <- getCensus2(name = "cbp",
vars = c("NAICS2012_TTL","GEO_TTL","EMP","LFO_TTL","GEO_ID","ESTAB"),
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
Business_Pure
#Sharif Amlani
#R 3.6.2
#Spring 2019
####################### Code Summary ##################
#Download Census Congressional Data
######################## Prelude ###############################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
######################## Upload API Key ####################
setwd("C:/Users/Shari/OneDrive/R-Scripts/API/US Census")
load("Census API Key.rda")
# Add key to .Renviron
Sys.setenv(CENSUS_KEY=Census_API_Key)
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
###################### Data From API ####################
library(censusapi)
library(httr)
###################### Data From API ####################
library(censusapi)
library(httr)
sahie_vars <- listCensusMetadata(name = "acs/acs1/spp", vintage = 2016)
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
getCensus2 <- function(name, vars, region, vintage, key = Sys.getenv("CENSUS_KEY")){
vars1 <- paste(c(vars), collapse = ",")
API_URL <- paste("https://api.census.gov/data/", vintage, "/", name, "?get=", vars1, "&for=", region, "&key=", key, sep = "")
x <- httr::GET(API_URL)
# Check the API call for a valid response
apiCheck(x)
# If check didn't fail, parse the content
raw <- apiParse(x)
# Format the response into a nice data frame
df <- responseFormat(raw)
return(df)
}
sahie_vars <- listCensusMetadata(name = "acs/acs1/spp", vintage = 2016)
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
######################## Prelude ###############################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
######################## Upload API Key ####################
setwd("C:/Users/Shari/OneDrive/R-Scripts/API/US Census")
load("Census API Key.rda")
# Add key to .Renviron
Sys.setenv(CENSUS_KEY=Census_API_Key)
# Reload .Renviron
readRenviron("~/.Renviron")
# Check to see that the expected key is output in your R console
Sys.getenv("CENSUS_KEY")
###################### Data From API ####################
library(censusapi)
library(httr)
setwd("C:/Users/Shari/OneDrive/R-Scripts/Functions")
setwd("C:/Users/Shari/OneDrive/R-Scripts/Functions")
source("CensusAPI - Function - Congressional Districts.R")
#https://api.census.gov/data/2016/acs/acs1/spp?get=NAME,S0201_0123E&for=congressional%20district:*&key=YOUR_KEY_GOES_HERE
sahie_vars <- listCensusMetadata(name = "acs/acs1/spp", vintage = 2016)
CD_Pure <- getCensus2(name = "acs/acs1/spp",
vars = sahie_vars$name[1:2],
region = "congressional%20district:*",
vintage = 2016,
key = Census_API_Key)
CD_Pure
x*-1
x <- c(1.2, 2, 3, 5)
x*-1
(x*-1) + abs(max(x))
#Natural Coding
Natural.Code <- function(data.column){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
#Natural Coding
Natural.Code <- function(data.column){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
Natural.Code(x)
(x*-1) + abs(max(x))
x <- c(1.2, 2, .3, 3, 5)
(x*-1) + abs(max(x))
#Natural Coding
Natural.Code <- function(data.column){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
Natural.Code(x)
Natural.Code_Continuious <- function(data.column){
Natural.Code_Continuious <- function(data.column){
Natural_Column <- (((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
Natural.Code_Continuious <- function(data.column){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
Natural.Code_Continuious <- function(data.column){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
Natural.Code_Continuious(x)
table(x, Natural.Code_Continuious(x))
table(Natural.Code_Continuious(x), x)
length(unique(na.omit(x)))
#Continuious Recoding
x <- c(1.2, 2, .3, 3, 5, 2000)
length(unique(na.omit(x)))
#continuous
x <- c(1.2, 2, .3, 3, 5)
Natural.Code_Continuous(x)
#Natural Code Continuous
Natural.Code_Continuous <- function(data.column){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
Natural.Code_Continuous(x)
#continuous
x <- c(1.2, 2, .3, 3, 5)
Natural.Code_Continuous(x)
table(Natural.Code_Continuous(x), x)
#Natural Coding
Natural.Code <- function(data.column, type){
if(type = "o"){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
if(type = "c"){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
}
#Natural Coding
Natural.Code <- function(data.column, type){
if(type == "o"){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
if(type == "c"){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
}
Natural.Code(x, type = "o")
#Ordinal
x <- c(1,2, 3, 4, 5)
Natural.Code(x, type = "o")
#Ordinal
x <- c(1,2, 3, 4, 5)
Natural.Code(x, type = "o")
table(Natural.Code(x, type = "o"), x)
#continuous
x <- c(1.2, 2, .3, 3, 5)
Natural.Code(x, type = "c")
table(Natural.Code(x, type = "c"), x)
#Natural Coding
Natural.Code <- function(data.column, type){
if(type == "o"){
magic_number <- length(unique(na.omit(data.column)))
Natural_Column <- (((data.column*-1) + magic_number) + 1)
return(Natural_Column)
}
if(type == "c"){
Natural_Column <- ((data.column*-1) + abs(max(data.column)) + 1)
return(Natural_Column)
}
}
#Example
#continuous
x <- c(1.2, 2, .3, 3, 5)
Natural.Code(x, type = "c")
table(Natural.Code(x, type = "c"), x)
#Ordinal
x <- c(1,2, 3, 4, 5)
Natural.Code(x, type = "o")
table(Natural.Code(x, type = "o"), x)
