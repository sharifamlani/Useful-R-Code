install.packages("car")
1+1
install.packages("sfsmisc")
install.packages("foreign")
install.packages("car")
install.packages("lattice")
install.packages("RColorBrewer")
install.packages("latticeExtra")
install.packages("effects")
install.packages("plyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rms")
#Preamble
library(foreign)
library(car)
library(lattice)
library(RColorBrewer)
library(latticeExtra)
library(effects)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(rms)
library(haven)
library(readstata13)
library(apsrtable)
library(boot)
library(Hmisc)
library(lmtest)
library(sandwich)
library(stargazer)
library(sfsmisc)
library(reshape)
library(ggthemes)
library(gmodels)
library(formattable)
library(corrplot)
library(plotly)
library(MASS)
library(stats)
library(lmtest)
library(faraway)
library(Zelig)
library(pscl)
library(DAMisc)
library(popbio)
library(nnet)
library(ZeligChoice)
library(multcomp)
library(survey)
library(pROC)
library(corrgram)
library(Hmisc)
library(RCurl)
library(coefplot)
library(basicspace)
library(basicspace)
#Preamble
library(foreign)
library(car)
library(lattice)
library(RColorBrewer)
library(latticeExtra)
library(effects)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(rms)
library(haven)
library(readstata13)
library(apsrtable)
library(boot)
library(Hmisc)
library(lmtest)
library(sandwich)
library(stargazer)
library(sfsmisc)
library(reshape)
library(ggthemes)
library(gmodels)
library(formattable)
library(corrplot)
library(plotly)
library(MASS)
library(stats)
library(lmtest)
library(faraway)
library(Zelig)
library(pscl)
library(DAMisc)
library(popbio)
library(nnet)
library(ZeligChoice)
library(multcomp)
library(survey)
library(pROC)
library(corrgram)
library(Hmisc)
library(RCurl)
library(coefplot)
library(mlogit)
library(GGally)
library(truncreg)
library(data.table)
library(basicspace)
.libPaths()
#Preamble
library(foreign)
library(car)
library(lattice)
library(RColorBrewer)
library(latticeExtra)
library(effects)
library(plyr)
library(dplyr)
library(ggplot2)
library(scales)
library(rms)
library(haven)
library(readstata13)
library(apsrtable)
library(boot)
library(Hmisc)
library(lmtest)
library(sandwich)
library(stargazer)
library(sfsmisc)
library(reshape)
library(ggthemes)
library(gmodels)
library(formattable)
library(corrplot)
library(plotly)
library(MASS)
library(stats)
library(lmtest)
library(faraway)
library(Zelig)
library(pscl)
library(DAMisc)
library(popbio)
library(nnet)
library(ZeligChoice)
library(multcomp)
library(survey)
library(pROC)
library(corrgram)
library(Hmisc)
library(RCurl)
library(coefplot)
library(mlogit)
library(GGally)
library(truncreg)
library(data.table)
library(basicspace)
library(gvlma)
library(reshape2)
library(psych)
library(GPArotation)
.libPaths()
x <- sample(1:100, 100)
y <- sample(1:100, 100)
c <- sample(1:1, 100)
c <- sample(1:1, 100, replace = T)
DF <- as.data.frame(x,y,z)
DF <- data.frame(x,y,z)
DF <- data.frame()
DF$x <- sample(1:100, 100)
mtcars
mtcars$const <- 1
mtcars$const
mtcars
test <- lm(mpg ~ cyl + const)
test <- lm(mpg ~ cyl + const, data = mtcars)
summary(test)
X <- data.frame()
X$Comp <- seq(1:50)
seq(1:50)
X$Comp
X
X$Comp <- seq(1:50)
X$Comp <- 1:50
X$Comp <- seq.int(nrow(1:50))
X$Comp
X$Comp <- c(1:50)
X <- seq(1:50)
Y <- seq(1:30, by = 3)
?seq
?runif
Y <- runif(50, min = 1, max = 100)
Y
Z <-data.frame(X, Y)
Z
update_statnet()
library(statnet)
statnet::update_statnet()
#Sharif Amlani
#R 3.5.1
#Fall 2019
################# Code Summary ##################
#This R code downloads the Congressional Floor Speech Data and combines it into a master dataset.
######################## Prelude ###############################
rm(list=ls(all=TRUE))
#*************************Upload Data************************************
options(stringsAsFactors = FALSE)
options(scipen = 3)
#Working Directory
setwd("C:/Users/Sharif/OneDrive/Data/Congressional Record/hein-daily")
#************** Upload Speaker ID Data
?read.table
Speaker_Map.Pure <- read.table("097_SpeakerMap.txt", sep ="|", header = T)
Speaker_Map.1 <- Speaker_Map.Pure
View(Speaker_Map.1)
#************** Upload Descriptive Data
Descriptive.Pure <- read.table("descr_097.txt", sep ="|", header = T)
Descriptive.1 <- Descriptive.Pure
View(Descriptive.1)
#************** Upload Speech Data
Speech.Pure <- read.table("speeches_097.txt", sep ="|", header = T, fill = T)
Speech.1 <- Speech.Pure
View(Speech.1)
Speech.Pure <- read.table("speeches_097.txt", sep ="|", header = T, fill = T, encoding = "ANSI")
Speech.Pure <- read.table("speeches_097_Test.txt", sep ="|", header = T, fill = T)
Speech.1 <- Speech.Pure
View(Speech.1)
Speech.Pure <- read.table("speeches_097_Test.txt", sep ="|", header = T)
Speech.Pure <- read.table("speeches_097_Test.txt", sep ="|", header = T)
Speech.Pure <- read.table("speeches_097_Test.txt", sep ="|", header = T, skip=1914)
Speech.Pure <- read.table("speeches_097_Test.txt", sep ="|", header = T, skip=c(1914, 8975))
Speech.1 <- Speech.Pure
View(Speech.1)
#************** Upload Speech Data
library(foreign)
Speech.Pure <- read.csv("speeches_097.csv")
Speech.1 <- Speech.Pure
View(Speech.1)
#Sharif Amlani
#R 3.5.1
#Fall 2019
################# Code Summary ##################
#This R code downloads the Congressional Floor Speech Data and combines it into a master dataset.
######################## Prelude ###############################
rm(list=ls(all=TRUE))
#*************************Upload Data************************************
options(stringsAsFactors = FALSE)
options(scipen = 3)
#Working Directory
setwd("C:/Users/Sharif/OneDrive/Data/Congressional Record/hein-daily")
#************** Upload Speaker ID Data
?read.table
Speaker_Map.Pure <- read.table("097_SpeakerMap.txt", sep ="|", header = T)
Speaker_Map.1 <- Speaker_Map.Pure
View(Speaker_Map.1)
#************** Upload Descriptive Data
Descriptive.Pure <- read.table("descr_097.txt", sep ="|", header = T)
Descriptive.1 <- Descriptive.Pure
View(Descriptive.1)
#************** Upload Speech Data
library(foreign)
Speech.Pure <- read.csv("speeches_097.csv")
Speech.1 <- Speech.Pure
View(Speech.1)
install.packages("remotes")
library(remotes)
remotes::install_github("leifeld/dna/rDNA@*release", INSTALL_opts = "--no-multiarch")
remotes::install_github("leifeld/dna/rDNA@*release", INSTALL_opts = "--no-multiarch")
remove.packages("rlang")
remotes::install_github("leifeld/dna/rDNA@*release", INSTALL_opts = "--no-multiarch")
install.packages("rlang")
Sys.getenv("R_LIBS_USER")
remotes::install_github("leifeld/dna/rDNA@*release", INSTALL_opts = "--no-multiarch")
install.packages("rJava")
library("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
library(remotes)
remotes::install_github("leifeld/dna/rDNA@*release", INSTALL_opts = "--no-multiarch")
.jcall("java/lang/System", "S", "getProperty", "java.version")
library(rJava)
.jinit()
.jcall("java/lang/System", "S", "getProperty", "java.version")
library("rDNA")
dna_init()
dna_gui(infile = dna_sample())
dna_gui(infile = dna_sample())
dna_gui(infile = dna_sample(), overwrite = TRUE)
dna_gui(infile = dna_sample(overwrite = TRUE))
library("rDNA")
dna_init()
dna_gui(infile = dna_sample())
library("rJava")
# 1. initialize JVM
.jinit()
# 2. retrieve the Java-version
.jcall("java/lang/System", "S", "getProperty", "java.version")
# 3. retrieve JAVA_HOME location
.jcall("java/lang/System", "S", "getProperty", "java.home")
# 4. retrieve Java architecture
.jcall("java/lang/System", "S", "getProperty", "sun.arch.data.model")
# 5. retreive architecture of OS (This should have 64 in it if step 4 displays
# "64")
.jcall("java/lang/System", "S", "getProperty", "os.arch")
# 6. retrieve architecture of R as well (This should again have 64 in it if
# step 4 and 5 display 64)
R.Version()$arch
remotes::install_github("leifeld/dna/rDNA@*release",
INSTALL_opts = "--no-multiarch")
remotes::install_github("leifeld/dna/rDNA@*release",
INSTALL_opts = "--no-multiarch", force = TRUE)
library("rDNA")
dna_init()
dna_gui(infile = dna_sample())
dna_gui()
dna_sample()
dna_sample(overwrite = TRUE)
dna_gui("sample.dna")
setwd("C:/Users/Sharif/OneDrive/R-Scripts/Discource Network Analysis/Start Up")
setwd("C:/Users/Sharif/OneDrive/R-Scripts/Discource Network Analysis/Start Up")
download.file("http://www.philipleifeld.de/cms/upload/Downloads/dna-1.31.jar",
destfile = "dna-1.31.jar", mode = "wb")
dna.init("dna-1.31.jar")
dna.gui(memory = 1024)
dna_gui(infile = dna_sample())
library("rJava")
# 1. initialize JVM
.jinit()
# 2. retrieve the Java-version
.jcall("java/lang/System", "S", "getProperty", "java.version")
# 3. retrieve JAVA_HOME location
.jcall("java/lang/System", "S", "getProperty", "java.home")
# 4. retrieve Java architecture
.jcall("java/lang/System", "S", "getProperty", "sun.arch.data.model")
# 5. retreive architecture of OS (This should have 64 in it if step 4 displays
# "64")
.jcall("java/lang/System", "S", "getProperty", "os.arch")
# 6. retrieve architecture of R as well (This should again have 64 in it if
# step 4 and 5 display 64)
R.Version()$arch
library("rDNA")
dna_init()
dna_gui(infile = dna_sample())
remotes::install_github("leifeld/dna/rDNA@*release",
INSTALL_opts = "--no-multiarch")
dna_downloadJar()
dna_downloadJar(force = TRUE)
dna_gui(infile = dna_sample())
R.Version()
dna_gui(infile = dna_sample())
library("rDNA")
dna_init()
dna_gui(infile = dna_sample(overwrite = TRUE))
.jcall("java/lang/System", "S", "getProperty", "java.version")
.jcall("java/lang/System", "S", "getProperty", "java.home")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_221")
library("rDNA")
dna_init()
dna_gui(infile = dna_sample(overwrite = TRUE))
library(rDNA)
dna_init()
conn <- dna_connection(dna_sample())
conn
library("rDNA")
dna_init()
dna_gui(infile = dna_sample(overwrite = TRUE))
rm(list=ls(all=TRUE))
library("rJava")
# 1. initialize JVM
.jinit()
# 2. retrieve the Java-version
.jcall("java/lang/System", "S", "getProperty", "java.version")
# 3. retrieve JAVA_HOME location
.jcall("java/lang/System", "S", "getProperty", "java.home")
# 4. retrieve Java architecture
.jcall("java/lang/System", "S", "getProperty", "sun.arch.data.model")
# 5. retreive architecture of OS (This should have 64 in it if step 4 displays
# "64")
.jcall("java/lang/System", "S", "getProperty", "os.arch")
# 6. retrieve architecture of R as well (This should again have 64 in it if
# step 4 and 5 display 64)
R.Version()$arch
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_221")
#Check to see if rDNA works
library("rDNA")
dna_init()
dna_gui(infile = dna_sample(overwrite = TRUE))
#Update rDNA
# install.packages("remotes")
remotes::install_github("leifeld/dna/rDNA@*release",
INSTALL_opts = "--no-multiarch")
dna_downloadJar(force = TRUE)
Sys.getenv("R_LIBS_USER")
