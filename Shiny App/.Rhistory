#************** Covariates
#We use the ratings variable (blog ideology) as a covariate in the topic prevalence portion of the model
#We will let prevalence be a function of the "rating" variable, which is coded as either "Liberal" or "Conservative," and the variable "day" which is an integer measure of days running from the first to the last day of 2008.
#A feature of the stm function is that "prevalence" can be expressed as a formula that can include multiple covariates and factorial or continuous covariates.
#For example, by using the formula setup we can enter other covariates additively.
#************** Number of Topics
#We now estimate a K number topic STM model.
###################### Vary K Levels ########################
#High Held-out likelihood is good
#**************** Logic
# STM assumes a fixed user-specified number of topics. There is not a "right" answer to the
# number of topics that are appropriate for a given corpus (Grimmer and Stewart 2013), but
# the function searchK uses a data-driven approach to selecting the number of topics. The
# function will perform several automated tests to help choose the number of topics including
# calculating the held-out log-likelihood (Wallach, Murray, Salakhutdinov, and Mimno 2009)
# and performing a residual analysis (Taddy 2012). For example, one could estimate a STM
# model for 7 and 10 topics and compare the results
#***************** Code
#Here we vary K to find the most optimal model fit
Results_K <- stm::searchK(out$documents, out$vocab, K = seq(2,20,1), data = out$meta, heldout.seed = 1993, init.type = "Spectral", verbose = F)
Results_K #12 topics is the best fit.
plot(Results_K)
#***************** Optimal K via lowest Residual
K_DF <- cbind(setNames(data.frame(matrix(unlist(Results_K$results$K), nrow=length(Results_K$results$K), byrow=T)), c("K")),
setNames(data.frame(matrix(unlist(Results_K$results$residual), nrow=length(Results_K$results$residual), byrow=T)), c("residual"))
)
Optimal_K <- subset(K_DF, residual == min(K_DF$residual))$K
#***************** Code
poliblogSelect <- selectModel(out$documents, out$vocab,
K = 7,
max.em.its = 75,
data = out$meta, runs = 20, seed = 8458159, verbose = F)
#Plot to see which models perform the best
#Note: We keep four models because 20 percent of 20 runs is 4
plotModels(poliblogSelect, pch = c(1, 2, 3, 4), legend.position = "bottomright")
#Note: I select model 1 becasue it is the best positioned in the figure
Results_1 <- poliblogSelect$runout[[1]]
plot(Results_1)
#################### Post Estimation PLots #################
#****************** Examine the Beta Matrix ***********************
#Beta Matrix
td_beta <- tidy(Results_1)
#Beta matrix tells us what are the words that contribute to each topic
td_beta %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
mutate(topic = paste0("Topic ", topic),
term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = as.factor(topic))) +
geom_col(alpha = 0.8, show.legend = FALSE) +
facet_wrap(~ topic, scales = "free_y") +
coord_flip() +
scale_x_reordered() +
labs(x = NULL, y = expression(beta),
title = "Highest word probabilities for each topic",
subtitle = "Different words are associated with different topics")
#****************** Examine the Gamma Matrix ***********************
td_gamma <- tidy(Results_1, matrix = "gamma", document_names = Words.1$Respondent)
#Gamma: In this document, how much did this topic contribute to it.
ggplot(td_gamma, aes(gamma, fill = as.factor(topic))) +
geom_histogram(alpha = 0.8, show.legend = FALSE) +
facet_wrap(~ topic, ncol = 3) +
labs(title = "Distribution of document probabilities for each topic",
subtitle = "Each topic is associated with 1-3 stories",
y = "Number of stories", x = expression(gamma))
#******************* Base Plot ***************************
#Convergence Criteria
plot(Results_1$convergence$bound, type = "l",
ylab = "Approximate Objective", main = "Convergence")
#Looks Good!
#Estimates a regression where documents are the units, the outcome is the proportion of each document about a topic in an STM model and the covariates are document-meta data. This procedure incorporates measurement uncertainty from the STM model using the method of composition.
#******************** Estimate ****************
out$meta$condition <- as.factor(out$meta$condition)
prep <- estimateEffect(1:7 ~ condition, Results_1, meta=out$meta,
uncertainty="Global")
#******************** Extract Estimates Into A Data Frame  ****************
Effect_Results_df <- NULL
for(i in seq(1,7,1)){
df.loop <- data.frame(summary(prep)[3]$tables[[i]])
df.loop$Topic <- paste("Topic", i, sep = " ")
df.loop$Label <- rownames(df.loop); rownames(df.loop) <- NULL
Effect_Results_df <- rbind(Effect_Results_df, df.loop)
}
#******************** Data Managment  ****************
#Remove extra Condition
Effect_Results_df$Label <- gsub( "condition", "", Effect_Results_df$Label)
#Calualte Confidence Intervals
Effect_Results_df$lower <- Effect_Results_df$Estimate - (qt(0.975,df=3000) * Effect_Results_df$Std..Error)
Effect_Results_df$upper <- Effect_Results_df$Estimate + (qt(0.975,df=3000) * Effect_Results_df$Std..Error)
#Subset away the intercept
Effect_Results_df.2 <- subset(Effect_Results_df, Label != "(Intercept)")
#******************* Plot **************************
# library(ggplot2)
# ggplot(Effect_Results_df.2, aes(x = Label, y = Estimate, ymin = lower, ymax = upper)) +
#   facet_wrap(Topic ~ .) +
#   scale_x_discrete(limits = rev(levels(factor(Effect_Results_df.2$Label)))) +
#   geom_pointrange() +
#   coord_flip() +
#   geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
#   theme_bw() +
#   labs (y = "Prevelance of Each Condition in Accross Topics",
#         x = "",
#         # caption = "Note: Baseline Category is Strong Republican.",
#         title = "Topic Prevelance in Oppose Open-Ended Question") +
#   theme(plot.title = element_text(hjust = 0.5),
#         plot.subtitle = element_text(hjust = 0.5))
library(ggplot2)
ggplot(Effect_Results_df.2, aes(x =Topic, y = Estimate, ymin = lower, ymax = upper)) +
facet_wrap(Label ~ .) +
scale_x_discrete(limits = rev(levels(factor(Effect_Results_df.2$Topic)))) +
geom_pointrange() +
coord_flip() +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
theme_bw() +
labs (y = "Prevelance of Topic Relative to Condition 1",
x = "",
#caption = "Note: Coefficients Relative to Condition 1",
title = "Topic Prevelance in Oppose Open-Ended Question") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#across result suggest that condition 1 and 3 perform similarly and condition 2 and 4 behave simjiallriy in the prevelance accross.
Test <- read.table("https://www3.cde.ca.gov/demo-downloads/attendance/chrabs1819.txt")
344	855	+	49
344	+ 855	+	49
344 +	855
810	+ 1242
1638 +	2181
1222 +	1200
9177 +	9577
3403 +	4731
215	+ 487
38540	+ 31191
3528 +	3935
1558 +	3995
395	+ 1098
918 +	325
1340 +	939
2310 +	2147
20515 +	26786
724 +	826
724 +	826  +11
1350 +	1966 + 83
543	+ 1169 + 29
2310 +	2147 + 169
1015 +	1578 + 85
y <-sample(c(0,1), 1000, replace = 1)
y
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
df <- glm(y ~ x*m, data = df)
df
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
df <- glm(y ~ x*m, data = df, link = "logit")
df <- glm(y ~ x*m, data = df, family=familytype(link = "logit"))
df <- glm(y ~ x*m, data = df, family=(link = "logit"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
df <- glm(y ~ x*m, data = df, family = "binomial")
summary(df)
######################### Data #####################
library(sjPlot)
get_model_data(Model, type = c("pred"), terms = c("x","m"))
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x","m"))
get_model_data(Model, type = c("pred"), terms = c("m", "x"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2), 1000, replace = 1)
df<- data.frame(y,x,m)
df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("m", "x"))
get_model_data(Model, type = c("pred"), terms = c("x", "m"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2), 1000, replace = 1)
df<- data.frame(y,x,m)
df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
x <- rnorm(n)
y <- beta_0 + beta_1*x + rnorm(n, sd=sigma)
m <- sample(c(1,2), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m[1,2]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(c(1,2,3), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m[1,2,3]"))
plot_model(Model, type = c("pred"), terms = c("x", "m[1,2,3]"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(seq(0,1,.01), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m[.1,.2,.3]"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[.1,.2,.3]"))
m
cut(df$m)
cut(df$m, breaks = 3)
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(seq(0,1,.01), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
df$m_cut <- cut(df$m, breaks = 3)
Model <- glm(y ~ x*df$m_cut, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m_cut"))
Model <- glm(y ~ x*df$m_cut, data = df, family = "binomial")
Model <- glm(y ~ x*m_cut, data = df, family = "binomial")
summary(Model)
get_model_data(Model, type = c("pred"), terms = c("x", "m_cut"))
plot_model(Model, type = c("pred"), terms = c("x", "m_cut"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[.1,.3,.5]"))
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m"))
Model <- glm(y ~ x*m_cut, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m_cut"))
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(seq(0,1,.01), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
#Sharif Amlani
#R 4.0.3
#Summer 2021
######################## Code Summary ##################
########################## Prelude #####################
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
options(scipen = 3)
set.seed(1993)
######################### Functions ###################
######################### Data #####################
library(sjPlot)
y <- sample(c(0,1), 1000, replace = 1)
x <- sample(c(1,2,3), 1000, replace = 1)
m <- sample(seq(0,1,.01), 1000, replace = 1)
df<- data.frame(y,x,m)
#df$m <- as.factor(df$m)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m"))
plot_model(Model, type = c("pred"), terms = c("x", "m[0,1]"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
df$m_cut <- cut(df$m, breaks = 3)
df$m_cut
Model <- glm(y ~ x*m_cut, data = df, family = "binomial")
summary(Model)
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
Model <- glm(y ~ x*m_cut, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m_cut"))
get_model_data(Model, type = c("pred"), terms = c("x", "m_cut"))
Model <- glm(y ~ x*m, data = df, family = "binomial")
summary(Model)
plot_model(Model, type = c("pred"), terms = c("x", "m[0,1]"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[.1,.3,.5]"))
get_model_data(Model, type = c("pred"), terms = c("x", "m[0,1]"))
0.53 - 0.48
0.47 - 0.51
0.51 - 0.48
0.53 -  0.47
6037.17	- 3626.81
my <- c(-2, -1,0)
as.logical(my)
setwd("C:/Users/Shari/OneDrive/R-Scripts/Shiny App")
library(shiny)
runApp('Example')
runApp('Example')
runApp('Example')
runApp('C:/Users/Shari/OneDrive/University of California, Davis/Fourth Year/Dissertation Prospectus/Out of State Donors/Shiny App/Out of District Member App')
runApp()
runApp('C:/Users/Shari/OneDrive/University of California, Davis/Fourth Year/Dissertation Prospectus/Out of State Donors/Shiny App/Out of District Member App')
runApp('C:/Users/Shari/OneDrive/University of California, Davis/Fourth Year/Dissertation Prospectus/Out of State Donors/Shiny App/Out of District Member App')
runApp('C:/Users/Shari/OneDrive/University of California, Davis/Fourth Year/Dissertation Prospectus/Out of State Donors/Shiny App/Out of District Member App')
runApp('C:/Users/Shari/OneDrive/University of California, Davis/Fourth Year/Dissertation Prospectus/Out of State Donors/Shiny App/Out of District Member App')
